from itertools import zip_longest

POINTS_PER_LEG = 501
MAX_THROWS_PER_ROUND = 3

def throw_to_points(throw):  # 0.5
    if  throw is None:
        return 0
    if throw=='25':
        return 25
    if throw=='50':
        return 50
    play = 1
    if throw[0] == 'D':
        play = 2
        throw = throw[1:]
    elif throw[0] == 'T':
        play = 3
        throw = throw[1:]
    
    return int(throw) * play
    

def parse_throws(throw_list):
    rounds = []
    current_round = ()
    current_player_round = ()
    remaining_points = [POINTS_PER_LEG, POINTS_PER_LEG]
    
    current_player_id = 0
    
    leg_complete = False
    i = 0
    
    while i < len(throw_list):
        throw = throw_list[i]
        
        if len(current_player_round) < MAX_THROWS_PER_ROUND and remaining_points[current_player_id] > 0:
            current_player_round += (throw,)
            remaining_points[current_player_id] -= throw_to_points(throw)
            
            if remaining_points[current_player_id] == 0 and (throw.startswith("D") or throw == "50"):
                leg_complete = True
        else:     
            current_round += (current_player_round,)
            current_player_id = 1 - current_player_id
            current_player_round = (throw, )
            
            remaining_points[current_player_id] -= throw_to_points(throw)
            if remaining_points[current_player_id] == 0 and (throw.startswith("D") or throw == "50"):
                leg_complete = True
        
        if len(current_round) == 2:
            rounds.append(current_round)
            current_round = ()
        
        if leg_complete:
            current_round += (current_player_round,)
            current_player_round = ()
            rounds.append(current_round)
            current_round = ()
            remaining_points = [POINTS_PER_LEG, POINTS_PER_LEG]
            leg_complete = False
        
        if remaining_points[current_player_id] < 0 or remaining_points[current_player_id] == 1:
            remaining_points[current_player_id] += throw_to_points(throw)
            current_player_id = 1 - current_player_id
            current_round += (current_player_round,)
            current_player_round = ()
        
        i += 1
    
    return rounds
def save_throws(throw_pairs, path):
    # with open(path, 'w') as file:
    #     for i in range(len(throw_pairs)):
    #         for j in range(3):
    #             if len(throw_pairs[i][0]) == 2 and j == 2:
    #                 file.write(' ')
    #             elif len(throw_pairs[i][0]) == 1 and j == 1:
    #                 file.write(' ')
    #             elif len(throw_pairs[i][0]) == 0 and j == 0:
    #                 file.write(' ')
    #             elif throw_pairs[i][0][j] is None:
    #                 file.write('X ')
    #             else:
    #                 file.write(str(throw_pairs[i][0][j]) + ' ')
                
    #             if len(throw_pairs[i][1]) == 2 and j == 2:
    #                 file.write(' ')
    #             elif len(throw_pairs[i][1]) == 1 and j == 1:
    #                 file.write(' ')
    #             elif len(throw_pairs[i][1]) == 0 and j == 0:
    #                 file.write(' ')
    #             elif throw_pairs[i][1][j] is None:
    #                 file.write('X ')
    #             else:
    #                 file.write(str(throw_pairs[i][1][j]) + '')
                
    #             file.write('\n')
                
    # save_throws(throw_pairs,path)
    # Create list of lines
    with open(path, "w") as res_file:
        throw_lines = []
        for throw_set in throw_pairs:
            if len(throw_set) == 2:
                for throw_pair in zip_longest(throw_set[0], throw_set[1], fillvalue=""):
                    p1 = throw_pair[0] if throw_pair[0] is not None else "X"
                    if len(throw_pair) == 2:
                        p2 = throw_pair[1] if throw_pair[1] is not None else "X"
                        throw_lines.append(f"{p1 if p1 else ' '} {p2}")
                    else:
                        throw_lines.append(f"{p1} ")
            else:
                for throw in throw_set[0]:
                    throw_lines.append(f"{throw if throw is not None else 'X'}")                

        throw_lines.append("")
        res_file.writelines("\n".join(throw_lines))
            


def split_into_sets(throw_pairs):  # 2  
    matches = []
    current_set = []
    current_leg = []
    player_points = [POINTS_PER_LEG, POINTS_PER_LEG]
    player_wins = [0, 0]
    is_leg_finished = False
    
    leg_starter = 0
    set_starter = 0
    current_player_id = leg_starter
    
    round_id = 0
    while round_id < len(throw_pairs):
        throw_round = throw_pairs[round_id]
        player_round_id = 0
        while player_round_id < len(throw_round):
            player_round = throw_round[player_round_id]
            total_points = sum([throw_to_points(throw) for throw in player_round])
            if player_points[current_player_id] - total_points == 0 and (player_round[-1].startswith("D") or player_round[-1] == "50"):
                is_leg_finished = True
            else:
                throw_id = 0
                while throw_id < len(player_round):
                    throw = player_round[throw_id]
                    if player_points[current_player_id] - throw_to_points(throw) <= 1:
                        throw_id += 1
                        continue
                    player_points[current_player_id] -= throw_to_points(throw)
                    throw_id += 1
            if not is_leg_finished: 
                current_player_id = 1 - current_player_id
            player_round_id += 1
        current_leg.append(throw_round)
        if is_leg_finished:
            player_wins[current_player_id] += 1
            current_set.append(current_leg)
            current_leg = []
            player_points = [POINTS_PER_LEG, POINTS_PER_LEG]
            is_leg_finished = False
            leg_starter = 1 - leg_starter
            
            if player_wins[current_player_id] < 3:
                current_player_id = leg_starter
            else:
                set_starter = 1 - set_starter
                leg_starter = set_starter
                current_player_id = set_starter
                matches.append(current_set)
                current_set = []
                player_wins = [0, 0]
        elif round_id == len(throw_pairs) - 1:
            current_set.append(current_leg)
            matches.append(current_set)
        round_id += 1
    
    return matches
def get_match_result(structured_throws):
    player1_wins = 0
    player2_wins = 0
    player1_legs = []
    player2_legs = []
    for i, set_ in enumerate(structured_throws):
        
        if i % 2 == 0:
           
            if set_[0] > set_[1]:
                player1_wins += 1
                player1_legs.append((set_[0], set_[1]))
            else:
                player2_wins += 1
                player2_legs.append((set_[0], set_[1]))
        else:
            # Hráč 2 otvára set
            if set_[0] > set_[1]:
                player2_wins += 1
                player2_legs.append((set_[0], set_[1]))
            else:
                player1_wins += 1
                player1_legs.append((set_[0], set_[1]))
    return (player1_wins, player2_wins), player1_legs + player2_legs
    
    



def get_180s(structured_throws):  # 0.5
  player1_score = 0
  player2_score = 0
  for set_scores in structured_throws:
      player1_sum = 0
      player2_sum = 0
      for i in range(3):  # Vezmime do úvahy prístup tri hody vo všetkých setoch
            if set_scores[0][i] == 'T20':
                player1_sum += 20 * 3
            if set_scores[1][i] == 'T20':
                player2_sum += 20 * 3
            if player1_sum == 180:
                player1_score += 1
            if player2_sum == 180:
                player2_score += 1
  return (player1_score, player2_score)


def get_average_throws(structured_throws):  # 
    average_scores = []

    for single_set in structured_throws:
        sums = [0, 0]
        counts = [0, 0]

    for result in single_set:
        for player_index, throw in enumerate(result):
            if throw is None:
                continue
            if 'D' in str(throw):
             throw = int(throw.replace('D', '')) * 2
            elif 'T' in str(throw):
             throw = int(throw.replace('T', '')) * 3
            else:
                throw = int(throw)

            sums[player_index % 2] += throw
            counts[player_index % 2] += 1

        avg_scores = []
        for i in range(2):
            if counts[i] > 0:
                avg_scores.append(round(sums[i] / counts[i], 2))
        else:
            avg_scores.append(0)

        average_scores.append(tuple(avg_scores))

    return average_scores


def generate_finishes(points):  # 2
    if points < 1 or points > 170:
        return []
    finishes = []
    for i in range(1, 4):
        for j in range(1, 4):
            if i + j == points:
                if i == 1 and j == 1:
                    finishes.append(['D1'])
                elif i == 1 and j == 2:
                    finishes.append(['D1'])
                elif i == 1 and j == 3:
                    finishes.append(['D1', '1', 'D1'])
                elif i == 2 and j == 1:
                    finishes.append(['D2', 'D1'])
                elif i == 2 and j == 2:
                    finishes.append(['D2', 'D1'])
                elif i == 2 and j == 3:
                    finishes.append(['D2', '1', 'D1'])
                elif i == 3 and j == 1:
                    finishes.append(['1', 'D1'])
                elif i == 3 and j == 2:
                    finishes.append(['1', '1', 'D1'])
                elif i == 3 and j == 3:
                    finishes.append(['4', 'D1'])
    finishes = list(set(tuple(finish) for finish in finishes))
    # Повертаємо список списків
    return [list(finish) for finish in finishes]
if __name__ == '__main__':
    # you can test your code here
    pass
